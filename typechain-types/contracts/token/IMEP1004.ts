/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace IMEP1004 {
  export type LocationProofStruct = {
    MEP1002TokenId: PromiseOrValue<BigNumberish>;
    MEP1004TokenIds: PromiseOrValue<BigNumberish>[];
    item: PromiseOrValue<string>;
    timestamp: PromiseOrValue<BigNumberish>;
  };

  export type LocationProofStructOutput = [
    BigNumber,
    BigNumber[],
    string,
    BigNumber
  ] & {
    MEP1002TokenId: BigNumber;
    MEP1004TokenIds: BigNumber[];
    item: string;
    timestamp: BigNumber;
  };
}

export interface IMEP1004Interface extends utils.Interface {
  functions: {
    "LocationProofs(uint256,uint256[],string)": FunctionFragment;
    "getSNCode(uint256)": FunctionFragment;
    "latestLocationProofs(string)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "LocationProofs"
      | "getSNCode"
      | "latestLocationProofs"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "LocationProofs",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getSNCode",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "latestLocationProofs",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "LocationProofs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getSNCode", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "latestLocationProofs",
    data: BytesLike
  ): Result;

  events: {
    "NewLocationProof(uint256,string,tuple)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NewLocationProof"): EventFragment;
}

export interface NewLocationProofEventObject {
  MEP1002TokenId: BigNumber;
  item: string;
  locationProof: IMEP1004.LocationProofStructOutput;
}
export type NewLocationProofEvent = TypedEvent<
  [BigNumber, string, IMEP1004.LocationProofStructOutput],
  NewLocationProofEventObject
>;

export type NewLocationProofEventFilter =
  TypedEventFilter<NewLocationProofEvent>;

export interface IMEP1004 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IMEP1004Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    LocationProofs(
      _MEP1002TokenId: PromiseOrValue<BigNumberish>,
      _MEP1004TokenIds: PromiseOrValue<BigNumberish>[],
      _item: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getSNCode(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    latestLocationProofs(
      _item: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[IMEP1004.LocationProofStructOutput]>;
  };

  LocationProofs(
    _MEP1002TokenId: PromiseOrValue<BigNumberish>,
    _MEP1004TokenIds: PromiseOrValue<BigNumberish>[],
    _item: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getSNCode(
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  latestLocationProofs(
    _item: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<IMEP1004.LocationProofStructOutput>;

  callStatic: {
    LocationProofs(
      _MEP1002TokenId: PromiseOrValue<BigNumberish>,
      _MEP1004TokenIds: PromiseOrValue<BigNumberish>[],
      _item: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    getSNCode(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    latestLocationProofs(
      _item: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<IMEP1004.LocationProofStructOutput>;
  };

  filters: {
    "NewLocationProof(uint256,string,tuple)"(
      MEP1002TokenId?: PromiseOrValue<BigNumberish> | null,
      item?: null,
      locationProof?: null
    ): NewLocationProofEventFilter;
    NewLocationProof(
      MEP1002TokenId?: PromiseOrValue<BigNumberish> | null,
      item?: null,
      locationProof?: null
    ): NewLocationProofEventFilter;
  };

  estimateGas: {
    LocationProofs(
      _MEP1002TokenId: PromiseOrValue<BigNumberish>,
      _MEP1004TokenIds: PromiseOrValue<BigNumberish>[],
      _item: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getSNCode(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    latestLocationProofs(
      _item: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    LocationProofs(
      _MEP1002TokenId: PromiseOrValue<BigNumberish>,
      _MEP1004TokenIds: PromiseOrValue<BigNumberish>[],
      _item: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getSNCode(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    latestLocationProofs(
      _item: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
