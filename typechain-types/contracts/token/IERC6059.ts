/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace IERC6059 {
  export type ChildStruct = {
    tokenId: PromiseOrValue<BigNumberish>;
    contractAddress: PromiseOrValue<string>;
  };

  export type ChildStructOutput = [BigNumber, string] & {
    tokenId: BigNumber;
    contractAddress: string;
  };
}

export interface IERC6059Interface extends utils.Interface {
  functions: {
    "acceptChild(uint256,uint256,address,uint256)": FunctionFragment;
    "addChild(uint256,uint256,bytes)": FunctionFragment;
    "burn(uint256,uint256)": FunctionFragment;
    "childOf(uint256,uint256)": FunctionFragment;
    "childrenOf(uint256)": FunctionFragment;
    "directOwnerOf(uint256)": FunctionFragment;
    "nestTransferFrom(address,address,uint256,uint256,bytes)": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "pendingChildOf(uint256,uint256)": FunctionFragment;
    "pendingChildrenOf(uint256)": FunctionFragment;
    "rejectAllChildren(uint256,uint256)": FunctionFragment;
    "transferChild(uint256,address,uint256,uint256,address,uint256,bool,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "acceptChild"
      | "addChild"
      | "burn"
      | "childOf"
      | "childrenOf"
      | "directOwnerOf"
      | "nestTransferFrom"
      | "ownerOf"
      | "pendingChildOf"
      | "pendingChildrenOf"
      | "rejectAllChildren"
      | "transferChild"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "acceptChild",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addChild",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "burn",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "childOf",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "childrenOf",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "directOwnerOf",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "nestTransferFrom",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingChildOf",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingChildrenOf",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "rejectAllChildren",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferChild",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BytesLike>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptChild",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addChild", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "childOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "childrenOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "directOwnerOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nestTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingChildOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingChildrenOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rejectAllChildren",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferChild",
    data: BytesLike
  ): Result;

  events: {
    "AllChildrenRejected(uint256)": EventFragment;
    "ChildAccepted(uint256,uint256,address,uint256)": EventFragment;
    "ChildProposed(uint256,uint256,address,uint256)": EventFragment;
    "ChildTransferred(uint256,uint256,address,uint256,bool)": EventFragment;
    "NestTransfer(address,address,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AllChildrenRejected"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChildAccepted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChildProposed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChildTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NestTransfer"): EventFragment;
}

export interface AllChildrenRejectedEventObject {
  tokenId: BigNumber;
}
export type AllChildrenRejectedEvent = TypedEvent<
  [BigNumber],
  AllChildrenRejectedEventObject
>;

export type AllChildrenRejectedEventFilter =
  TypedEventFilter<AllChildrenRejectedEvent>;

export interface ChildAcceptedEventObject {
  tokenId: BigNumber;
  childIndex: BigNumber;
  childAddress: string;
  childId: BigNumber;
}
export type ChildAcceptedEvent = TypedEvent<
  [BigNumber, BigNumber, string, BigNumber],
  ChildAcceptedEventObject
>;

export type ChildAcceptedEventFilter = TypedEventFilter<ChildAcceptedEvent>;

export interface ChildProposedEventObject {
  tokenId: BigNumber;
  childIndex: BigNumber;
  childAddress: string;
  childId: BigNumber;
}
export type ChildProposedEvent = TypedEvent<
  [BigNumber, BigNumber, string, BigNumber],
  ChildProposedEventObject
>;

export type ChildProposedEventFilter = TypedEventFilter<ChildProposedEvent>;

export interface ChildTransferredEventObject {
  tokenId: BigNumber;
  childIndex: BigNumber;
  childAddress: string;
  childId: BigNumber;
  fromPending: boolean;
}
export type ChildTransferredEvent = TypedEvent<
  [BigNumber, BigNumber, string, BigNumber, boolean],
  ChildTransferredEventObject
>;

export type ChildTransferredEventFilter =
  TypedEventFilter<ChildTransferredEvent>;

export interface NestTransferEventObject {
  from: string;
  to: string;
  fromTokenId: BigNumber;
  toTokenId: BigNumber;
  tokenId: BigNumber;
}
export type NestTransferEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber],
  NestTransferEventObject
>;

export type NestTransferEventFilter = TypedEventFilter<NestTransferEvent>;

export interface IERC6059 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IERC6059Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    acceptChild(
      parentId: PromiseOrValue<BigNumberish>,
      childIndex: PromiseOrValue<BigNumberish>,
      childAddress: PromiseOrValue<string>,
      childId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addChild(
      parentId: PromiseOrValue<BigNumberish>,
      childId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    burn(
      tokenId: PromiseOrValue<BigNumberish>,
      maxRecursiveBurns: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    childOf(
      parentId: PromiseOrValue<BigNumberish>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[IERC6059.ChildStructOutput]>;

    childrenOf(
      parentId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[IERC6059.ChildStructOutput[]]>;

    directOwnerOf(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber, boolean]>;

    nestTransferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      destinationId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    ownerOf(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { owner: string }>;

    pendingChildOf(
      parentId: PromiseOrValue<BigNumberish>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[IERC6059.ChildStructOutput]>;

    pendingChildrenOf(
      parentId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[IERC6059.ChildStructOutput[]]>;

    rejectAllChildren(
      parentId: PromiseOrValue<BigNumberish>,
      maxRejections: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferChild(
      tokenId: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      destinationId: PromiseOrValue<BigNumberish>,
      childIndex: PromiseOrValue<BigNumberish>,
      childAddress: PromiseOrValue<string>,
      childId: PromiseOrValue<BigNumberish>,
      isPending: PromiseOrValue<boolean>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  acceptChild(
    parentId: PromiseOrValue<BigNumberish>,
    childIndex: PromiseOrValue<BigNumberish>,
    childAddress: PromiseOrValue<string>,
    childId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addChild(
    parentId: PromiseOrValue<BigNumberish>,
    childId: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  burn(
    tokenId: PromiseOrValue<BigNumberish>,
    maxRecursiveBurns: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  childOf(
    parentId: PromiseOrValue<BigNumberish>,
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<IERC6059.ChildStructOutput>;

  childrenOf(
    parentId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<IERC6059.ChildStructOutput[]>;

  directOwnerOf(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber, boolean]>;

  nestTransferFrom(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    destinationId: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  ownerOf(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  pendingChildOf(
    parentId: PromiseOrValue<BigNumberish>,
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<IERC6059.ChildStructOutput>;

  pendingChildrenOf(
    parentId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<IERC6059.ChildStructOutput[]>;

  rejectAllChildren(
    parentId: PromiseOrValue<BigNumberish>,
    maxRejections: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferChild(
    tokenId: PromiseOrValue<BigNumberish>,
    to: PromiseOrValue<string>,
    destinationId: PromiseOrValue<BigNumberish>,
    childIndex: PromiseOrValue<BigNumberish>,
    childAddress: PromiseOrValue<string>,
    childId: PromiseOrValue<BigNumberish>,
    isPending: PromiseOrValue<boolean>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    acceptChild(
      parentId: PromiseOrValue<BigNumberish>,
      childIndex: PromiseOrValue<BigNumberish>,
      childAddress: PromiseOrValue<string>,
      childId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    addChild(
      parentId: PromiseOrValue<BigNumberish>,
      childId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    burn(
      tokenId: PromiseOrValue<BigNumberish>,
      maxRecursiveBurns: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    childOf(
      parentId: PromiseOrValue<BigNumberish>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IERC6059.ChildStructOutput>;

    childrenOf(
      parentId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IERC6059.ChildStructOutput[]>;

    directOwnerOf(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber, boolean]>;

    nestTransferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      destinationId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    ownerOf(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    pendingChildOf(
      parentId: PromiseOrValue<BigNumberish>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IERC6059.ChildStructOutput>;

    pendingChildrenOf(
      parentId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IERC6059.ChildStructOutput[]>;

    rejectAllChildren(
      parentId: PromiseOrValue<BigNumberish>,
      maxRejections: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferChild(
      tokenId: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      destinationId: PromiseOrValue<BigNumberish>,
      childIndex: PromiseOrValue<BigNumberish>,
      childAddress: PromiseOrValue<string>,
      childId: PromiseOrValue<BigNumberish>,
      isPending: PromiseOrValue<boolean>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AllChildrenRejected(uint256)"(
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): AllChildrenRejectedEventFilter;
    AllChildrenRejected(
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): AllChildrenRejectedEventFilter;

    "ChildAccepted(uint256,uint256,address,uint256)"(
      tokenId?: PromiseOrValue<BigNumberish> | null,
      childIndex?: null,
      childAddress?: PromiseOrValue<string> | null,
      childId?: PromiseOrValue<BigNumberish> | null
    ): ChildAcceptedEventFilter;
    ChildAccepted(
      tokenId?: PromiseOrValue<BigNumberish> | null,
      childIndex?: null,
      childAddress?: PromiseOrValue<string> | null,
      childId?: PromiseOrValue<BigNumberish> | null
    ): ChildAcceptedEventFilter;

    "ChildProposed(uint256,uint256,address,uint256)"(
      tokenId?: PromiseOrValue<BigNumberish> | null,
      childIndex?: null,
      childAddress?: PromiseOrValue<string> | null,
      childId?: PromiseOrValue<BigNumberish> | null
    ): ChildProposedEventFilter;
    ChildProposed(
      tokenId?: PromiseOrValue<BigNumberish> | null,
      childIndex?: null,
      childAddress?: PromiseOrValue<string> | null,
      childId?: PromiseOrValue<BigNumberish> | null
    ): ChildProposedEventFilter;

    "ChildTransferred(uint256,uint256,address,uint256,bool)"(
      tokenId?: PromiseOrValue<BigNumberish> | null,
      childIndex?: null,
      childAddress?: PromiseOrValue<string> | null,
      childId?: PromiseOrValue<BigNumberish> | null,
      fromPending?: null
    ): ChildTransferredEventFilter;
    ChildTransferred(
      tokenId?: PromiseOrValue<BigNumberish> | null,
      childIndex?: null,
      childAddress?: PromiseOrValue<string> | null,
      childId?: PromiseOrValue<BigNumberish> | null,
      fromPending?: null
    ): ChildTransferredEventFilter;

    "NestTransfer(address,address,uint256,uint256,uint256)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      fromTokenId?: null,
      toTokenId?: null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): NestTransferEventFilter;
    NestTransfer(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      fromTokenId?: null,
      toTokenId?: null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): NestTransferEventFilter;
  };

  estimateGas: {
    acceptChild(
      parentId: PromiseOrValue<BigNumberish>,
      childIndex: PromiseOrValue<BigNumberish>,
      childAddress: PromiseOrValue<string>,
      childId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addChild(
      parentId: PromiseOrValue<BigNumberish>,
      childId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    burn(
      tokenId: PromiseOrValue<BigNumberish>,
      maxRecursiveBurns: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    childOf(
      parentId: PromiseOrValue<BigNumberish>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    childrenOf(
      parentId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    directOwnerOf(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nestTransferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      destinationId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    ownerOf(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pendingChildOf(
      parentId: PromiseOrValue<BigNumberish>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pendingChildrenOf(
      parentId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rejectAllChildren(
      parentId: PromiseOrValue<BigNumberish>,
      maxRejections: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferChild(
      tokenId: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      destinationId: PromiseOrValue<BigNumberish>,
      childIndex: PromiseOrValue<BigNumberish>,
      childAddress: PromiseOrValue<string>,
      childId: PromiseOrValue<BigNumberish>,
      isPending: PromiseOrValue<boolean>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptChild(
      parentId: PromiseOrValue<BigNumberish>,
      childIndex: PromiseOrValue<BigNumberish>,
      childAddress: PromiseOrValue<string>,
      childId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addChild(
      parentId: PromiseOrValue<BigNumberish>,
      childId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    burn(
      tokenId: PromiseOrValue<BigNumberish>,
      maxRecursiveBurns: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    childOf(
      parentId: PromiseOrValue<BigNumberish>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    childrenOf(
      parentId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    directOwnerOf(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nestTransferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      destinationId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    ownerOf(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pendingChildOf(
      parentId: PromiseOrValue<BigNumberish>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pendingChildrenOf(
      parentId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rejectAllChildren(
      parentId: PromiseOrValue<BigNumberish>,
      maxRejections: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferChild(
      tokenId: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      destinationId: PromiseOrValue<BigNumberish>,
      childIndex: PromiseOrValue<BigNumberish>,
      childAddress: PromiseOrValue<string>,
      childId: PromiseOrValue<BigNumberish>,
      isPending: PromiseOrValue<boolean>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
