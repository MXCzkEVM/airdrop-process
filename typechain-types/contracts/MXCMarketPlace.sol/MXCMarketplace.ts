/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace MXCMarketplace {
  export type OrderStruct = {
    id: PromiseOrValue<BytesLike>;
    seller: PromiseOrValue<string>;
    nftAddress: PromiseOrValue<string>;
    price: PromiseOrValue<BigNumberish>;
    expiresAt: PromiseOrValue<BigNumberish>;
  };

  export type OrderStructOutput = [
    string,
    string,
    string,
    BigNumber,
    BigNumber
  ] & {
    id: string;
    seller: string;
    nftAddress: string;
    price: BigNumber;
    expiresAt: BigNumber;
  };
}

export interface MXCMarketplaceInterface extends utils.Interface {
  functions: {
    "ERC721_Interface()": FunctionFragment;
    "assertPrice(address,uint256)": FunctionFragment;
    "cancelOrder(address,uint256)": FunctionFragment;
    "collectionMarketInfo(address)": FunctionFragment;
    "createOrder(address,uint256,uint256,uint256)": FunctionFragment;
    "executeOrder(address,uint256)": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "orderByAssetId(address,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "ERC721_Interface"
      | "assertPrice"
      | "cancelOrder"
      | "collectionMarketInfo"
      | "createOrder"
      | "executeOrder"
      | "onERC721Received"
      | "orderByAssetId"
      | "owner"
      | "renounceOwnership"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "ERC721_Interface",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "assertPrice",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelOrder",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "collectionMarketInfo",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "createOrder",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "executeOrder",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "orderByAssetId",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "ERC721_Interface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assertPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectionMarketInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "orderByAssetId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "OrderCancelled(bytes32,uint256,address,address)": EventFragment;
    "OrderCreated(bytes32,uint256,address,address,uint256,uint256)": EventFragment;
    "OrderSuccessful(bytes32,uint256,address,address,uint256,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OrderCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrderCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrderSuccessful"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface OrderCancelledEventObject {
  id: string;
  assetId: BigNumber;
  seller: string;
  nftAddress: string;
}
export type OrderCancelledEvent = TypedEvent<
  [string, BigNumber, string, string],
  OrderCancelledEventObject
>;

export type OrderCancelledEventFilter = TypedEventFilter<OrderCancelledEvent>;

export interface OrderCreatedEventObject {
  id: string;
  assetId: BigNumber;
  seller: string;
  nftAddress: string;
  priceInWei: BigNumber;
  expiresAt: BigNumber;
}
export type OrderCreatedEvent = TypedEvent<
  [string, BigNumber, string, string, BigNumber, BigNumber],
  OrderCreatedEventObject
>;

export type OrderCreatedEventFilter = TypedEventFilter<OrderCreatedEvent>;

export interface OrderSuccessfulEventObject {
  id: string;
  assetId: BigNumber;
  seller: string;
  nftAddress: string;
  totalPrice: BigNumber;
  buyer: string;
}
export type OrderSuccessfulEvent = TypedEvent<
  [string, BigNumber, string, string, BigNumber, string],
  OrderSuccessfulEventObject
>;

export type OrderSuccessfulEventFilter = TypedEventFilter<OrderSuccessfulEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface MXCMarketplace extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MXCMarketplaceInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ERC721_Interface(overrides?: CallOverrides): Promise<[string]>;

    assertPrice(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { price: BigNumber; transactions: BigNumber }
    >;

    cancelOrder(
      nftAddress: PromiseOrValue<string>,
      assetId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    collectionMarketInfo(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        floorPrice: BigNumber;
        ceilingPrice: BigNumber;
      }
    >;

    createOrder(
      nftAddress: PromiseOrValue<string>,
      assetId: PromiseOrValue<BigNumberish>,
      priceInWei: PromiseOrValue<BigNumberish>,
      expiresAt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    executeOrder(
      nftAddress: PromiseOrValue<string>,
      assetId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    orderByAssetId(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber, BigNumber] & {
        id: string;
        seller: string;
        nftAddress: string;
        price: BigNumber;
        expiresAt: BigNumber;
      }
    >;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  ERC721_Interface(overrides?: CallOverrides): Promise<string>;

  assertPrice(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { price: BigNumber; transactions: BigNumber }
  >;

  cancelOrder(
    nftAddress: PromiseOrValue<string>,
    assetId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  collectionMarketInfo(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { floorPrice: BigNumber; ceilingPrice: BigNumber }
  >;

  createOrder(
    nftAddress: PromiseOrValue<string>,
    assetId: PromiseOrValue<BigNumberish>,
    priceInWei: PromiseOrValue<BigNumberish>,
    expiresAt: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  executeOrder(
    nftAddress: PromiseOrValue<string>,
    assetId: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  onERC721Received(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    arg2: PromiseOrValue<BigNumberish>,
    arg3: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  orderByAssetId(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, BigNumber, BigNumber] & {
      id: string;
      seller: string;
      nftAddress: string;
      price: BigNumber;
      expiresAt: BigNumber;
    }
  >;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    ERC721_Interface(overrides?: CallOverrides): Promise<string>;

    assertPrice(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { price: BigNumber; transactions: BigNumber }
    >;

    cancelOrder(
      nftAddress: PromiseOrValue<string>,
      assetId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<MXCMarketplace.OrderStructOutput>;

    collectionMarketInfo(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        floorPrice: BigNumber;
        ceilingPrice: BigNumber;
      }
    >;

    createOrder(
      nftAddress: PromiseOrValue<string>,
      assetId: PromiseOrValue<BigNumberish>,
      priceInWei: PromiseOrValue<BigNumberish>,
      expiresAt: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    executeOrder(
      nftAddress: PromiseOrValue<string>,
      assetId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    orderByAssetId(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber, BigNumber] & {
        id: string;
        seller: string;
        nftAddress: string;
        price: BigNumber;
        expiresAt: BigNumber;
      }
    >;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OrderCancelled(bytes32,uint256,address,address)"(
      id?: null,
      assetId?: PromiseOrValue<BigNumberish> | null,
      seller?: PromiseOrValue<string> | null,
      nftAddress?: null
    ): OrderCancelledEventFilter;
    OrderCancelled(
      id?: null,
      assetId?: PromiseOrValue<BigNumberish> | null,
      seller?: PromiseOrValue<string> | null,
      nftAddress?: null
    ): OrderCancelledEventFilter;

    "OrderCreated(bytes32,uint256,address,address,uint256,uint256)"(
      id?: null,
      assetId?: PromiseOrValue<BigNumberish> | null,
      seller?: PromiseOrValue<string> | null,
      nftAddress?: null,
      priceInWei?: null,
      expiresAt?: null
    ): OrderCreatedEventFilter;
    OrderCreated(
      id?: null,
      assetId?: PromiseOrValue<BigNumberish> | null,
      seller?: PromiseOrValue<string> | null,
      nftAddress?: null,
      priceInWei?: null,
      expiresAt?: null
    ): OrderCreatedEventFilter;

    "OrderSuccessful(bytes32,uint256,address,address,uint256,address)"(
      id?: null,
      assetId?: PromiseOrValue<BigNumberish> | null,
      seller?: PromiseOrValue<string> | null,
      nftAddress?: null,
      totalPrice?: null,
      buyer?: PromiseOrValue<string> | null
    ): OrderSuccessfulEventFilter;
    OrderSuccessful(
      id?: null,
      assetId?: PromiseOrValue<BigNumberish> | null,
      seller?: PromiseOrValue<string> | null,
      nftAddress?: null,
      totalPrice?: null,
      buyer?: PromiseOrValue<string> | null
    ): OrderSuccessfulEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    ERC721_Interface(overrides?: CallOverrides): Promise<BigNumber>;

    assertPrice(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cancelOrder(
      nftAddress: PromiseOrValue<string>,
      assetId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    collectionMarketInfo(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createOrder(
      nftAddress: PromiseOrValue<string>,
      assetId: PromiseOrValue<BigNumberish>,
      priceInWei: PromiseOrValue<BigNumberish>,
      expiresAt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    executeOrder(
      nftAddress: PromiseOrValue<string>,
      assetId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    orderByAssetId(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ERC721_Interface(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    assertPrice(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cancelOrder(
      nftAddress: PromiseOrValue<string>,
      assetId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    collectionMarketInfo(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createOrder(
      nftAddress: PromiseOrValue<string>,
      assetId: PromiseOrValue<BigNumberish>,
      priceInWei: PromiseOrValue<BigNumberish>,
      expiresAt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    executeOrder(
      nftAddress: PromiseOrValue<string>,
      assetId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    orderByAssetId(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
