/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface LPWANInterface extends utils.Interface {
  functions: {
    "DOMAIN_SEPARATOR()": FunctionFragment;
    "PERMIT_TYPEHASH()": FunctionFragment;
    "PERMIT_TYPEHASH2()": FunctionFragment;
    "__Controllable_init()": FunctionFragment;
    "approveToken(address,address,uint256)": FunctionFragment;
    "burnExcessToken(uint256)": FunctionFragment;
    "claimSupernodeReward(address,uint256,bool,address,bytes)": FunctionFragment;
    "controllers(address)": FunctionFragment;
    "getMEP1004Addr()": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "mintMEP1004Stations(address,string,uint256,string)": FunctionFragment;
    "mintMEP1004StationsBySignature(address,uint256,string,string,address,bytes)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setController(address,bool)": FunctionFragment;
    "setMEP1004Addr(address)": FunctionFragment;
    "submitLocationProofs(uint256,uint256[],string)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "withdrawal(address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DOMAIN_SEPARATOR"
      | "PERMIT_TYPEHASH"
      | "PERMIT_TYPEHASH2"
      | "__Controllable_init"
      | "approveToken"
      | "burnExcessToken"
      | "claimSupernodeReward"
      | "controllers"
      | "getMEP1004Addr"
      | "initialize"
      | "mintMEP1004Stations"
      | "mintMEP1004StationsBySignature"
      | "owner"
      | "renounceOwnership"
      | "setController"
      | "setMEP1004Addr"
      | "submitLocationProofs"
      | "transferOwnership"
      | "withdrawal"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DOMAIN_SEPARATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PERMIT_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PERMIT_TYPEHASH2",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "__Controllable_init",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "approveToken",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "burnExcessToken",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "claimSupernodeReward",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "controllers",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getMEP1004Addr",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "mintMEP1004Stations",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "mintMEP1004StationsBySignature",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setController",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMEP1004Addr",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "submitLocationProofs",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawal",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "DOMAIN_SEPARATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PERMIT_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PERMIT_TYPEHASH2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "__Controllable_init",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "burnExcessToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimSupernodeReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "controllers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMEP1004Addr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintMEP1004Stations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintMEP1004StationsBySignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMEP1004Addr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitLocationProofs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdrawal", data: BytesLike): Result;

  events: {
    "BurnExcessToken(uint256,uint256)": EventFragment;
    "ClaimReward(address,address,uint256)": EventFragment;
    "ControllerChanged(address,bool)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BurnExcessToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClaimReward"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ControllerChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface BurnExcessTokenEventObject {
  id: BigNumber;
  amount: BigNumber;
}
export type BurnExcessTokenEvent = TypedEvent<
  [BigNumber, BigNumber],
  BurnExcessTokenEventObject
>;

export type BurnExcessTokenEventFilter = TypedEventFilter<BurnExcessTokenEvent>;

export interface ClaimRewardEventObject {
  account: string;
  to: string;
  amount: BigNumber;
}
export type ClaimRewardEvent = TypedEvent<
  [string, string, BigNumber],
  ClaimRewardEventObject
>;

export type ClaimRewardEventFilter = TypedEventFilter<ClaimRewardEvent>;

export interface ControllerChangedEventObject {
  controller: string;
  enabled: boolean;
}
export type ControllerChangedEvent = TypedEvent<
  [string, boolean],
  ControllerChangedEventObject
>;

export type ControllerChangedEventFilter =
  TypedEventFilter<ControllerChangedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface LPWAN extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LPWANInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<[string]>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    PERMIT_TYPEHASH2(overrides?: CallOverrides): Promise<[string]>;

    __Controllable_init(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    approveToken(
      token: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    burnExcessToken(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimSupernodeReward(
      to: PromiseOrValue<string>,
      totalReward: PromiseOrValue<BigNumberish>,
      burn: PromiseOrValue<boolean>,
      _signer: PromiseOrValue<string>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    controllers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getMEP1004Addr(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      MEP1004Address_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    mintMEP1004Stations(
      _to: PromiseOrValue<string>,
      _SNCode: PromiseOrValue<string>,
      _H3Index: PromiseOrValue<BigNumberish>,
      _regionID: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    mintMEP1004StationsBySignature(
      _to: PromiseOrValue<string>,
      _H3Index: PromiseOrValue<BigNumberish>,
      _SNCode: PromiseOrValue<string>,
      regionID: PromiseOrValue<string>,
      _signer: PromiseOrValue<string>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setController(
      controller: PromiseOrValue<string>,
      enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMEP1004Addr(
      MEP1004Address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    submitLocationProofs(
      _MEP1002TokenId: PromiseOrValue<BigNumberish>,
      _MEP1004TokenIds: PromiseOrValue<BigNumberish>[],
      _item: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawal(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

  PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  PERMIT_TYPEHASH2(overrides?: CallOverrides): Promise<string>;

  __Controllable_init(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  approveToken(
    token: PromiseOrValue<string>,
    spender: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  burnExcessToken(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimSupernodeReward(
    to: PromiseOrValue<string>,
    totalReward: PromiseOrValue<BigNumberish>,
    burn: PromiseOrValue<boolean>,
    _signer: PromiseOrValue<string>,
    _signature: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  controllers(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getMEP1004Addr(overrides?: CallOverrides): Promise<string>;

  initialize(
    MEP1004Address_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  mintMEP1004Stations(
    _to: PromiseOrValue<string>,
    _SNCode: PromiseOrValue<string>,
    _H3Index: PromiseOrValue<BigNumberish>,
    _regionID: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  mintMEP1004StationsBySignature(
    _to: PromiseOrValue<string>,
    _H3Index: PromiseOrValue<BigNumberish>,
    _SNCode: PromiseOrValue<string>,
    regionID: PromiseOrValue<string>,
    _signer: PromiseOrValue<string>,
    _signature: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setController(
    controller: PromiseOrValue<string>,
    enabled: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMEP1004Addr(
    MEP1004Address: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  submitLocationProofs(
    _MEP1002TokenId: PromiseOrValue<BigNumberish>,
    _MEP1004TokenIds: PromiseOrValue<BigNumberish>[],
    _item: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawal(
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    PERMIT_TYPEHASH2(overrides?: CallOverrides): Promise<string>;

    __Controllable_init(overrides?: CallOverrides): Promise<void>;

    approveToken(
      token: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    burnExcessToken(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    claimSupernodeReward(
      to: PromiseOrValue<string>,
      totalReward: PromiseOrValue<BigNumberish>,
      burn: PromiseOrValue<boolean>,
      _signer: PromiseOrValue<string>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    controllers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getMEP1004Addr(overrides?: CallOverrides): Promise<string>;

    initialize(
      MEP1004Address_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    mintMEP1004Stations(
      _to: PromiseOrValue<string>,
      _SNCode: PromiseOrValue<string>,
      _H3Index: PromiseOrValue<BigNumberish>,
      _regionID: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    mintMEP1004StationsBySignature(
      _to: PromiseOrValue<string>,
      _H3Index: PromiseOrValue<BigNumberish>,
      _SNCode: PromiseOrValue<string>,
      regionID: PromiseOrValue<string>,
      _signer: PromiseOrValue<string>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setController(
      controller: PromiseOrValue<string>,
      enabled: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMEP1004Addr(
      MEP1004Address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    submitLocationProofs(
      _MEP1002TokenId: PromiseOrValue<BigNumberish>,
      _MEP1004TokenIds: PromiseOrValue<BigNumberish>[],
      _item: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawal(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "BurnExcessToken(uint256,uint256)"(
      id?: PromiseOrValue<BigNumberish> | null,
      amount?: null
    ): BurnExcessTokenEventFilter;
    BurnExcessToken(
      id?: PromiseOrValue<BigNumberish> | null,
      amount?: null
    ): BurnExcessTokenEventFilter;

    "ClaimReward(address,address,uint256)"(
      account?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      amount?: null
    ): ClaimRewardEventFilter;
    ClaimReward(
      account?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      amount?: null
    ): ClaimRewardEventFilter;

    "ControllerChanged(address,bool)"(
      controller?: PromiseOrValue<string> | null,
      enabled?: null
    ): ControllerChangedEventFilter;
    ControllerChanged(
      controller?: PromiseOrValue<string> | null,
      enabled?: null
    ): ControllerChangedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<BigNumber>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    PERMIT_TYPEHASH2(overrides?: CallOverrides): Promise<BigNumber>;

    __Controllable_init(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    approveToken(
      token: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    burnExcessToken(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimSupernodeReward(
      to: PromiseOrValue<string>,
      totalReward: PromiseOrValue<BigNumberish>,
      burn: PromiseOrValue<boolean>,
      _signer: PromiseOrValue<string>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    controllers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMEP1004Addr(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      MEP1004Address_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    mintMEP1004Stations(
      _to: PromiseOrValue<string>,
      _SNCode: PromiseOrValue<string>,
      _H3Index: PromiseOrValue<BigNumberish>,
      _regionID: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    mintMEP1004StationsBySignature(
      _to: PromiseOrValue<string>,
      _H3Index: PromiseOrValue<BigNumberish>,
      _SNCode: PromiseOrValue<string>,
      regionID: PromiseOrValue<string>,
      _signer: PromiseOrValue<string>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setController(
      controller: PromiseOrValue<string>,
      enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMEP1004Addr(
      MEP1004Address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    submitLocationProofs(
      _MEP1002TokenId: PromiseOrValue<BigNumberish>,
      _MEP1004TokenIds: PromiseOrValue<BigNumberish>[],
      _item: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawal(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PERMIT_TYPEHASH2(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    __Controllable_init(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    approveToken(
      token: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    burnExcessToken(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimSupernodeReward(
      to: PromiseOrValue<string>,
      totalReward: PromiseOrValue<BigNumberish>,
      burn: PromiseOrValue<boolean>,
      _signer: PromiseOrValue<string>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    controllers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMEP1004Addr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      MEP1004Address_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    mintMEP1004Stations(
      _to: PromiseOrValue<string>,
      _SNCode: PromiseOrValue<string>,
      _H3Index: PromiseOrValue<BigNumberish>,
      _regionID: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    mintMEP1004StationsBySignature(
      _to: PromiseOrValue<string>,
      _H3Index: PromiseOrValue<BigNumberish>,
      _SNCode: PromiseOrValue<string>,
      regionID: PromiseOrValue<string>,
      _signer: PromiseOrValue<string>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setController(
      controller: PromiseOrValue<string>,
      enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMEP1004Addr(
      MEP1004Address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    submitLocationProofs(
      _MEP1002TokenId: PromiseOrValue<BigNumberish>,
      _MEP1004TokenIds: PromiseOrValue<BigNumberish>[],
      _item: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawal(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
