/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../../common";
import type {
  NameWrapperMock,
  NameWrapperMockInterface,
} from "../../../../../contracts/mns/wrapper/mocks/NameWrapperMock";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "names",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
    ],
    name: "ownerOf",
    outputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5060408051808201825260048152631d195cdd60e21b6020918201529051600091610088917fc0ae3fe48f09fde4a60d1b2e3f2c5d1f8dd5922c3ab88ca76377c5fd10816e49917f9c22ff5f21f0b81b113e63f7db6da94fedef11b2119b4088b89664fb9a3cb6589101918252602082015260400190565b60408051601f19818403018152828252805160209182012083830183526008845267746573742e6d786360c01b84830152600081815291829052919020909250906100d3908261018b565b5050600180546001600160a01b0319163317905561024a565b634e487b7160e01b600052604160045260246000fd5b600181811c9082168061011657607f821691505b60208210810361013657634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561018657600081815260208120601f850160051c810160208610156101635750805b601f850160051c820191505b818110156101825782815560010161016f565b5050505b505050565b81516001600160401b038111156101a4576101a46100ec565b6101b8816101b28454610102565b8461013c565b602080601f8311600181146101ed57600084156101d55750858301515b600019600386901b1c1916600185901b178555610182565b600085815260208120601f198616915b8281101561021c578886015182559484019460019091019084016101fd565b508582101561023a5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b61020b806102596000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806320c38e2b1461003b5780636352211e14610064575b600080fd5b61004e610049366004610134565b61009a565b60405161005b919061014d565b60405180910390f35b610082610072366004610134565b506001546001600160a01b031690565b6040516001600160a01b03909116815260200161005b565b600060208190529081526040902080546100b39061019b565b80601f01602080910402602001604051908101604052809291908181526020018280546100df9061019b565b801561012c5780601f106101015761010080835404028352916020019161012c565b820191906000526020600020905b81548152906001019060200180831161010f57829003601f168201915b505050505081565b60006020828403121561014657600080fd5b5035919050565b600060208083528351808285015260005b8181101561017a5785810183015185820160400152820161015e565b506000604082860101526040601f19601f8301168501019250505092915050565b600181811c908216806101af57607f821691505b6020821081036101cf57634e487b7160e01b600052602260045260246000fd5b5091905056fea2646970667358221220fde22052a616e24892407bdd7f3651c547af6d151b0b178852b8971ded89aa1064736f6c63430008120033";

type NameWrapperMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: NameWrapperMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class NameWrapperMock__factory extends ContractFactory {
  constructor(...args: NameWrapperMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<NameWrapperMock> {
    return super.deploy(overrides || {}) as Promise<NameWrapperMock>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): NameWrapperMock {
    return super.attach(address) as NameWrapperMock;
  }
  override connect(signer: Signer): NameWrapperMock__factory {
    return super.connect(signer) as NameWrapperMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): NameWrapperMockInterface {
    return new utils.Interface(_abi) as NameWrapperMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): NameWrapperMock {
    return new Contract(address, _abi, signerOrProvider) as NameWrapperMock;
  }
}
