/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  IMEP802,
  IMEP802Interface,
} from "../../../contracts/token/IMEP802";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "string",
        name: "_email",
        type: "string",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "address",
        name: "_applicationContractAddress",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "_nftContractAddress",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "_sensorProfileContractAddress",
        type: "address",
      },
    ],
    name: "PIDProduced",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "bytes32",
        name: "_pIDHash",
        type: "bytes32",
      },
      {
        indexed: true,
        internalType: "address",
        name: "claimer",
        type: "address",
      },
    ],
    name: "SensorNFTClaimed",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "nftContractAddress",
        type: "address",
      },
    ],
    name: "SensorNFTContractDeployed",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "_tokenID",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "bytes32",
        name: "_pIDHash",
        type: "bytes32",
      },
    ],
    name: "SensorNFTMinted",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "address",
        name: "renewer",
        type: "address",
      },
    ],
    name: "SensorNFTRenewed",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_pID",
        type: "string",
      },
      {
        internalType: "address",
        name: "_sensorProfileContractAddress",
        type: "address",
      },
    ],
    name: "claimSensorNFT",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_tokenId",
        type: "uint256",
      },
    ],
    name: "isValid",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_pIDHash",
        type: "bytes32",
      },
      {
        internalType: "string",
        name: "_tokenURI",
        type: "string",
      },
    ],
    name: "mintSensorNFT",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_email",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "_applicationContractAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "_sensorProfileContractAddress",
        type: "address",
      },
    ],
    name: "producePID",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_pIDHashEVM",
        type: "bytes32",
      },
    ],
    name: "renewDevice",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
] as const;

export class IMEP802__factory {
  static readonly abi = _abi;
  static createInterface(): IMEP802Interface {
    return new utils.Interface(_abi) as IMEP802Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IMEP802 {
    return new Contract(address, _abi, signerOrProvider) as IMEP802;
  }
}
