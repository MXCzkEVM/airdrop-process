/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  ERC6551AccountImplementation,
  ERC6551AccountImplementationInterface,
} from "../../../contracts/ERC6551/ERC6551AccountImplementation";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_size",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_start",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_end",
        type: "uint256",
      },
    ],
    name: "InvalidCodeAtRange",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "target",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "TransactionExecuted",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "executeCall",
    outputs: [
      {
        internalType: "bytes",
        name: "result",
        type: "bytes",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "hash",
        type: "bytes32",
      },
      {
        internalType: "bytes",
        name: "signature",
        type: "bytes",
      },
    ],
    name: "isValidSignature",
    outputs: [
      {
        internalType: "bytes4",
        name: "magicValue",
        type: "bytes4",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "nonce",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "token",
    outputs: [
      {
        internalType: "uint256",
        name: "chainId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "tokenContract",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610ac5806100206000396000f3fe6080604052600436106100595760003560e01c806301ffc9a7146100655780631626ba7e1461009a5780638da5cb5b146100d35780639e5d4c4914610100578063affed0e014610120578063fc0c546a1461014457600080fd5b3661006057005b600080fd5b34801561007157600080fd5b5061008561008036600461074d565b61017c565b60405190151581526020015b60405180910390f35b3480156100a657600080fd5b506100ba6100b536600461078d565b6101b3565b6040516001600160e01b03199091168152602001610091565b3480156100df57600080fd5b506100e86101ea565b6040516001600160a01b039091168152602001610091565b61011361010e366004610860565b6102da565b6040516100919190610939565b34801561012c57600080fd5b5061013660005481565b604051908152602001610091565b34801561015057600080fd5b5061015961040e565b604080519384526001600160a01b03909216602084015290820152606001610091565b60006001600160e01b031982166301ffc9a760e01b14806101ad57506001600160e01b03198216630801407360e31b145b92915050565b6000806101c86101c16101ea565b858561044b565b905080156101e05750630b135d3f60e11b90506101ad565b5060009392505050565b600080600080306001600160a01b031663fc0c546a6040518163ffffffff1660e01b8152600401606060405180830381865afa15801561022e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610252919061094c565b925092509250468314610269576000935050505090565b6040516331a9108f60e11b8152600481018290526001600160a01b03831690636352211e90602401602060405180830381865afa1580156102ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102d29190610985565b935050505090565b60606102e46101ea565b6001600160a01b0316336001600160a01b03161461033b5760405162461bcd60e51b815260206004820152600f60248201526e2737ba103a37b5b2b71037bbb732b960891b60448201526064015b60405180910390fd5b6000856001600160a01b03168585856040516103589291906109a2565b60006040518083038185875af1925050503d8060008114610395576040519150601f19603f3d011682016040523d82523d6000602084013e61039a565b606091505b5092509050806103ac57815160208301fd5b60008081546103ba906109c8565b9190508190555084866001600160a01b03167f47d99ad340f52da66535aff7e10da1ceb85a32bcbd9fa1c42314d194545e14d286866040516103fd9291906109e1565b60405180910390a350949350505050565b6000808030803b9061042b90610425606084610a10565b8361058f565b80602001905181019061043e919061094c565b9196909550909350915050565b600080600061045a8585610644565b9092509050600081600481111561047357610473610a23565b1480156104915750856001600160a01b0316826001600160a01b0316145b156104a157600192505050610588565b600080876001600160a01b0316631626ba7e60e01b88886040516024016104c9929190610a39565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199094169390931790925290516105079190610a5a565b600060405180830381855afa9150503d8060008114610542576040519150601f19603f3d011682016040523d82523d6000602084013e610547565b606091505b509150915081801561055a575080516020145b801561058157508051630b135d3f60e11b9061057f9083016020908101908401610a76565b145b9450505050505b9392505050565b6060833b60008190036105b2575050604080516020810190915260008152610588565b808411156105d0575050604080516020810190915260008152610588565b838310156106025760405163162544fd60e11b8152600481018290526024810185905260448101849052606401610332565b83830384820360008282106106175782610619565b815b60408051603f8301601f19168101909152818152955090508087602087018a3c505050509392505050565b600080825160410361067a5760208301516040840151606085015160001a61066e87828585610689565b94509450505050610682565b506000905060025b9250929050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156106c05750600090506003610744565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015610714573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661073d57600060019250925050610744565b9150600090505b94509492505050565b60006020828403121561075f57600080fd5b81356001600160e01b03198116811461058857600080fd5b634e487b7160e01b600052604160045260246000fd5b600080604083850312156107a057600080fd5b82359150602083013567ffffffffffffffff808211156107bf57600080fd5b818501915085601f8301126107d357600080fd5b8135818111156107e5576107e5610777565b604051601f8201601f19908116603f0116810190838211818310171561080d5761080d610777565b8160405282815288602084870101111561082657600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b6001600160a01b038116811461085d57600080fd5b50565b6000806000806060858703121561087657600080fd5b843561088181610848565b935060208501359250604085013567ffffffffffffffff808211156108a557600080fd5b818701915087601f8301126108b957600080fd5b8135818111156108c857600080fd5b8860208285010111156108da57600080fd5b95989497505060200194505050565b60005b838110156109045781810151838201526020016108ec565b50506000910152565b600081518084526109258160208601602086016108e9565b601f01601f19169290920160200192915050565b602081526000610588602083018461090d565b60008060006060848603121561096157600080fd5b83519250602084015161097381610848565b80925050604084015190509250925092565b60006020828403121561099757600080fd5b815161058881610848565b8183823760009101908152919050565b634e487b7160e01b600052601160045260246000fd5b6000600182016109da576109da6109b2565b5060010190565b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b818103818111156101ad576101ad6109b2565b634e487b7160e01b600052602160045260246000fd5b828152604060208201526000610a52604083018461090d565b949350505050565b60008251610a6c8184602087016108e9565b9190910192915050565b600060208284031215610a8857600080fd5b505191905056fea2646970667358221220500c0d958a68459765522cdeefe06722a9c11ed8d4c15245c9411c5579952b9264736f6c63430008120033";

type ERC6551AccountImplementationConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ERC6551AccountImplementationConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ERC6551AccountImplementation__factory extends ContractFactory {
  constructor(...args: ERC6551AccountImplementationConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ERC6551AccountImplementation> {
    return super.deploy(
      overrides || {}
    ) as Promise<ERC6551AccountImplementation>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): ERC6551AccountImplementation {
    return super.attach(address) as ERC6551AccountImplementation;
  }
  override connect(signer: Signer): ERC6551AccountImplementation__factory {
    return super.connect(signer) as ERC6551AccountImplementation__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ERC6551AccountImplementationInterface {
    return new utils.Interface(_abi) as ERC6551AccountImplementationInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ERC6551AccountImplementation {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as ERC6551AccountImplementation;
  }
}
