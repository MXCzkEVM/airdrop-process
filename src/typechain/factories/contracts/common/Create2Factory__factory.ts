/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  Create2Factory,
  Create2FactoryInterface,
} from "../../../contracts/common/Create2Factory";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "contractAddress",
        type: "address",
      },
    ],
    name: "ContractCreated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "salt",
        type: "bytes32",
      },
      {
        internalType: "bytes",
        name: "bytecode",
        type: "bytes",
      },
    ],
    name: "createContract",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506102e5806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80638129fc1c1461003b578063a326ea2714610045575b600080fd5b610043610074565b005b6100586100533660046101f4565b610181565b6040516001600160a01b03909116815260200160405180910390f35b600054610100900460ff16158080156100945750600054600160ff909116105b806100ae5750303b1580156100ae575060005460ff166001145b6101155760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b6000805460ff191660011790558015610138576000805461ff0019166101001790555b801561017e576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50565b600080838351602085016000f59050803b61019b57600080fd5b6040516001600160a01b03821681527fcf78cf0d6f3d8371e1075c69c492ab4ec5d8cf23a1a239b6a51a1d00be7ca3129060200160405180910390a19392505050565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561020757600080fd5b82359150602083013567ffffffffffffffff8082111561022657600080fd5b818501915085601f83011261023a57600080fd5b81358181111561024c5761024c6101de565b604051601f8201601f19908116603f01168101908382118183101715610274576102746101de565b8160405282815288602084870101111561028d57600080fd5b826020860160208301376000602084830101528095505050505050925092905056fea26469706673582212202aa44cb47846ebe26e3c054b1d3711595c3b17bfe9c2e1ea7111dd6f62ebddb264736f6c63430008120033";

type Create2FactoryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: Create2FactoryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Create2Factory__factory extends ContractFactory {
  constructor(...args: Create2FactoryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Create2Factory> {
    return super.deploy(overrides || {}) as Promise<Create2Factory>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Create2Factory {
    return super.attach(address) as Create2Factory;
  }
  override connect(signer: Signer): Create2Factory__factory {
    return super.connect(signer) as Create2Factory__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): Create2FactoryInterface {
    return new utils.Interface(_abi) as Create2FactoryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Create2Factory {
    return new Contract(address, _abi, signerOrProvider) as Create2Factory;
  }
}
