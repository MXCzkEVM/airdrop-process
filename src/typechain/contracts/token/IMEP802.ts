/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface IMEP802Interface extends utils.Interface {
  functions: {
    "claimSensorNFT(string,address)": FunctionFragment;
    "isValid(uint256)": FunctionFragment;
    "mintSensorNFT(bytes32,string)": FunctionFragment;
    "producePID(string,uint256,address,address)": FunctionFragment;
    "renewDevice(bytes32)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "claimSensorNFT"
      | "isValid"
      | "mintSensorNFT"
      | "producePID"
      | "renewDevice"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "claimSensorNFT",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isValid",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "mintSensorNFT",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "producePID",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "renewDevice",
    values: [PromiseOrValue<BytesLike>]
  ): string;

  decodeFunctionResult(
    functionFragment: "claimSensorNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isValid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintSensorNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "producePID", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renewDevice",
    data: BytesLike
  ): Result;

  events: {
    "PIDProduced(string,uint256,address,address,address)": EventFragment;
    "SensorNFTClaimed(uint256,bytes32,address)": EventFragment;
    "SensorNFTContractDeployed(address)": EventFragment;
    "SensorNFTMinted(uint256,bytes32)": EventFragment;
    "SensorNFTRenewed(uint256,uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "PIDProduced"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SensorNFTClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SensorNFTContractDeployed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SensorNFTMinted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SensorNFTRenewed"): EventFragment;
}

export interface PIDProducedEventObject {
  _email: string;
  _amount: BigNumber;
  _applicationContractAddress: string;
  _nftContractAddress: string;
  _sensorProfileContractAddress: string;
}
export type PIDProducedEvent = TypedEvent<
  [string, BigNumber, string, string, string],
  PIDProducedEventObject
>;

export type PIDProducedEventFilter = TypedEventFilter<PIDProducedEvent>;

export interface SensorNFTClaimedEventObject {
  tokenId: BigNumber;
  _pIDHash: string;
  claimer: string;
}
export type SensorNFTClaimedEvent = TypedEvent<
  [BigNumber, string, string],
  SensorNFTClaimedEventObject
>;

export type SensorNFTClaimedEventFilter =
  TypedEventFilter<SensorNFTClaimedEvent>;

export interface SensorNFTContractDeployedEventObject {
  nftContractAddress: string;
}
export type SensorNFTContractDeployedEvent = TypedEvent<
  [string],
  SensorNFTContractDeployedEventObject
>;

export type SensorNFTContractDeployedEventFilter =
  TypedEventFilter<SensorNFTContractDeployedEvent>;

export interface SensorNFTMintedEventObject {
  _tokenID: BigNumber;
  _pIDHash: string;
}
export type SensorNFTMintedEvent = TypedEvent<
  [BigNumber, string],
  SensorNFTMintedEventObject
>;

export type SensorNFTMintedEventFilter = TypedEventFilter<SensorNFTMintedEvent>;

export interface SensorNFTRenewedEventObject {
  tokenId: BigNumber;
  amount: BigNumber;
  renewer: string;
}
export type SensorNFTRenewedEvent = TypedEvent<
  [BigNumber, BigNumber, string],
  SensorNFTRenewedEventObject
>;

export type SensorNFTRenewedEventFilter =
  TypedEventFilter<SensorNFTRenewedEvent>;

export interface IMEP802 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IMEP802Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    claimSensorNFT(
      _pID: PromiseOrValue<string>,
      _sensorProfileContractAddress: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isValid(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    mintSensorNFT(
      _pIDHash: PromiseOrValue<BytesLike>,
      _tokenURI: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    producePID(
      _email: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _applicationContractAddress: PromiseOrValue<string>,
      _sensorProfileContractAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renewDevice(
      _pIDHashEVM: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  claimSensorNFT(
    _pID: PromiseOrValue<string>,
    _sensorProfileContractAddress: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isValid(
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  mintSensorNFT(
    _pIDHash: PromiseOrValue<BytesLike>,
    _tokenURI: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  producePID(
    _email: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    _applicationContractAddress: PromiseOrValue<string>,
    _sensorProfileContractAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renewDevice(
    _pIDHashEVM: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    claimSensorNFT(
      _pID: PromiseOrValue<string>,
      _sensorProfileContractAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    isValid(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    mintSensorNFT(
      _pIDHash: PromiseOrValue<BytesLike>,
      _tokenURI: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    producePID(
      _email: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _applicationContractAddress: PromiseOrValue<string>,
      _sensorProfileContractAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    renewDevice(
      _pIDHashEVM: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "PIDProduced(string,uint256,address,address,address)"(
      _email?: PromiseOrValue<string> | null,
      _amount?: PromiseOrValue<BigNumberish> | null,
      _applicationContractAddress?: PromiseOrValue<string> | null,
      _nftContractAddress?: null,
      _sensorProfileContractAddress?: null
    ): PIDProducedEventFilter;
    PIDProduced(
      _email?: PromiseOrValue<string> | null,
      _amount?: PromiseOrValue<BigNumberish> | null,
      _applicationContractAddress?: PromiseOrValue<string> | null,
      _nftContractAddress?: null,
      _sensorProfileContractAddress?: null
    ): PIDProducedEventFilter;

    "SensorNFTClaimed(uint256,bytes32,address)"(
      tokenId?: PromiseOrValue<BigNumberish> | null,
      _pIDHash?: PromiseOrValue<BytesLike> | null,
      claimer?: PromiseOrValue<string> | null
    ): SensorNFTClaimedEventFilter;
    SensorNFTClaimed(
      tokenId?: PromiseOrValue<BigNumberish> | null,
      _pIDHash?: PromiseOrValue<BytesLike> | null,
      claimer?: PromiseOrValue<string> | null
    ): SensorNFTClaimedEventFilter;

    "SensorNFTContractDeployed(address)"(
      nftContractAddress?: PromiseOrValue<string> | null
    ): SensorNFTContractDeployedEventFilter;
    SensorNFTContractDeployed(
      nftContractAddress?: PromiseOrValue<string> | null
    ): SensorNFTContractDeployedEventFilter;

    "SensorNFTMinted(uint256,bytes32)"(
      _tokenID?: PromiseOrValue<BigNumberish> | null,
      _pIDHash?: PromiseOrValue<BytesLike> | null
    ): SensorNFTMintedEventFilter;
    SensorNFTMinted(
      _tokenID?: PromiseOrValue<BigNumberish> | null,
      _pIDHash?: PromiseOrValue<BytesLike> | null
    ): SensorNFTMintedEventFilter;

    "SensorNFTRenewed(uint256,uint256,address)"(
      tokenId?: PromiseOrValue<BigNumberish> | null,
      amount?: PromiseOrValue<BigNumberish> | null,
      renewer?: PromiseOrValue<string> | null
    ): SensorNFTRenewedEventFilter;
    SensorNFTRenewed(
      tokenId?: PromiseOrValue<BigNumberish> | null,
      amount?: PromiseOrValue<BigNumberish> | null,
      renewer?: PromiseOrValue<string> | null
    ): SensorNFTRenewedEventFilter;
  };

  estimateGas: {
    claimSensorNFT(
      _pID: PromiseOrValue<string>,
      _sensorProfileContractAddress: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isValid(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintSensorNFT(
      _pIDHash: PromiseOrValue<BytesLike>,
      _tokenURI: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    producePID(
      _email: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _applicationContractAddress: PromiseOrValue<string>,
      _sensorProfileContractAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renewDevice(
      _pIDHashEVM: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    claimSensorNFT(
      _pID: PromiseOrValue<string>,
      _sensorProfileContractAddress: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isValid(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mintSensorNFT(
      _pIDHash: PromiseOrValue<BytesLike>,
      _tokenURI: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    producePID(
      _email: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _applicationContractAddress: PromiseOrValue<string>,
      _sensorProfileContractAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renewDevice(
      _pIDHashEVM: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
