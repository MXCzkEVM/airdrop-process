/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface IMEP804Interface extends utils.Interface {
  functions: {
    "calculateFuelHealth(address)": FunctionFragment;
    "claimReward(address,address,bytes32,bytes32[],bytes32,uint256,uint256)": FunctionFragment;
    "mintMoreRewardToken(uint256)": FunctionFragment;
    "rewardTokenBalance()": FunctionFragment;
    "toggleHealth()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "calculateFuelHealth"
      | "claimReward"
      | "mintMoreRewardToken"
      | "rewardTokenBalance"
      | "toggleHealth"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "calculateFuelHealth",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "claimReward",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "mintMoreRewardToken",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardTokenBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "toggleHealth",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "calculateFuelHealth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintMoreRewardToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardTokenBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toggleHealth",
    data: BytesLike
  ): Result;

  events: {
    "CycleCountSet(uint256)": EventFragment;
    "HealthToggled(bool)": EventFragment;
    "MerkleRootUpdated(bytes32)": EventFragment;
    "MoreRewardTokenMinted(uint256)": EventFragment;
    "RewardClaimed(address,address)": EventFragment;
    "RewardContractDeployed(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CycleCountSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "HealthToggled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MerkleRootUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MoreRewardTokenMinted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardContractDeployed"): EventFragment;
}

export interface CycleCountSetEventObject {
  _count: BigNumber;
}
export type CycleCountSetEvent = TypedEvent<
  [BigNumber],
  CycleCountSetEventObject
>;

export type CycleCountSetEventFilter = TypedEventFilter<CycleCountSetEvent>;

export interface HealthToggledEventObject {
  _status: boolean;
}
export type HealthToggledEvent = TypedEvent<
  [boolean],
  HealthToggledEventObject
>;

export type HealthToggledEventFilter = TypedEventFilter<HealthToggledEvent>;

export interface MerkleRootUpdatedEventObject {
  _merkleRoot: string;
}
export type MerkleRootUpdatedEvent = TypedEvent<
  [string],
  MerkleRootUpdatedEventObject
>;

export type MerkleRootUpdatedEventFilter =
  TypedEventFilter<MerkleRootUpdatedEvent>;

export interface MoreRewardTokenMintedEventObject {
  _amount: BigNumber;
}
export type MoreRewardTokenMintedEvent = TypedEvent<
  [BigNumber],
  MoreRewardTokenMintedEventObject
>;

export type MoreRewardTokenMintedEventFilter =
  TypedEventFilter<MoreRewardTokenMintedEvent>;

export interface RewardClaimedEventObject {
  _appContractAddress: string;
  claimer: string;
}
export type RewardClaimedEvent = TypedEvent<
  [string, string],
  RewardClaimedEventObject
>;

export type RewardClaimedEventFilter = TypedEventFilter<RewardClaimedEvent>;

export interface RewardContractDeployedEventObject {
  rewardContractAddress: string;
}
export type RewardContractDeployedEvent = TypedEvent<
  [string],
  RewardContractDeployedEventObject
>;

export type RewardContractDeployedEventFilter =
  TypedEventFilter<RewardContractDeployedEvent>;

export interface IMEP804 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IMEP804Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    calculateFuelHealth(
      _nftContractAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    claimReward(
      _appContractAddress: PromiseOrValue<string>,
      _nftAccountAddress: PromiseOrValue<string>,
      _merkleRoot: PromiseOrValue<BytesLike>,
      _merkleProof: PromiseOrValue<BytesLike>[],
      _leaf: PromiseOrValue<BytesLike>,
      _amount: PromiseOrValue<BigNumberish>,
      _cycle: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    mintMoreRewardToken(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    rewardTokenBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    toggleHealth(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  calculateFuelHealth(
    _nftContractAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  claimReward(
    _appContractAddress: PromiseOrValue<string>,
    _nftAccountAddress: PromiseOrValue<string>,
    _merkleRoot: PromiseOrValue<BytesLike>,
    _merkleProof: PromiseOrValue<BytesLike>[],
    _leaf: PromiseOrValue<BytesLike>,
    _amount: PromiseOrValue<BigNumberish>,
    _cycle: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  mintMoreRewardToken(
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  rewardTokenBalance(overrides?: CallOverrides): Promise<BigNumber>;

  toggleHealth(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    calculateFuelHealth(
      _nftContractAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimReward(
      _appContractAddress: PromiseOrValue<string>,
      _nftAccountAddress: PromiseOrValue<string>,
      _merkleRoot: PromiseOrValue<BytesLike>,
      _merkleProof: PromiseOrValue<BytesLike>[],
      _leaf: PromiseOrValue<BytesLike>,
      _amount: PromiseOrValue<BigNumberish>,
      _cycle: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    mintMoreRewardToken(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    rewardTokenBalance(overrides?: CallOverrides): Promise<BigNumber>;

    toggleHealth(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "CycleCountSet(uint256)"(
      _count?: PromiseOrValue<BigNumberish> | null
    ): CycleCountSetEventFilter;
    CycleCountSet(
      _count?: PromiseOrValue<BigNumberish> | null
    ): CycleCountSetEventFilter;

    "HealthToggled(bool)"(
      _status?: PromiseOrValue<boolean> | null
    ): HealthToggledEventFilter;
    HealthToggled(
      _status?: PromiseOrValue<boolean> | null
    ): HealthToggledEventFilter;

    "MerkleRootUpdated(bytes32)"(
      _merkleRoot?: PromiseOrValue<BytesLike> | null
    ): MerkleRootUpdatedEventFilter;
    MerkleRootUpdated(
      _merkleRoot?: PromiseOrValue<BytesLike> | null
    ): MerkleRootUpdatedEventFilter;

    "MoreRewardTokenMinted(uint256)"(
      _amount?: PromiseOrValue<BigNumberish> | null
    ): MoreRewardTokenMintedEventFilter;
    MoreRewardTokenMinted(
      _amount?: PromiseOrValue<BigNumberish> | null
    ): MoreRewardTokenMintedEventFilter;

    "RewardClaimed(address,address)"(
      _appContractAddress?: PromiseOrValue<string> | null,
      claimer?: PromiseOrValue<string> | null
    ): RewardClaimedEventFilter;
    RewardClaimed(
      _appContractAddress?: PromiseOrValue<string> | null,
      claimer?: PromiseOrValue<string> | null
    ): RewardClaimedEventFilter;

    "RewardContractDeployed(address)"(
      rewardContractAddress?: PromiseOrValue<string> | null
    ): RewardContractDeployedEventFilter;
    RewardContractDeployed(
      rewardContractAddress?: PromiseOrValue<string> | null
    ): RewardContractDeployedEventFilter;
  };

  estimateGas: {
    calculateFuelHealth(
      _nftContractAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimReward(
      _appContractAddress: PromiseOrValue<string>,
      _nftAccountAddress: PromiseOrValue<string>,
      _merkleRoot: PromiseOrValue<BytesLike>,
      _merkleProof: PromiseOrValue<BytesLike>[],
      _leaf: PromiseOrValue<BytesLike>,
      _amount: PromiseOrValue<BigNumberish>,
      _cycle: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    mintMoreRewardToken(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    rewardTokenBalance(overrides?: CallOverrides): Promise<BigNumber>;

    toggleHealth(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    calculateFuelHealth(
      _nftContractAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimReward(
      _appContractAddress: PromiseOrValue<string>,
      _nftAccountAddress: PromiseOrValue<string>,
      _merkleRoot: PromiseOrValue<BytesLike>,
      _merkleProof: PromiseOrValue<BytesLike>[],
      _leaf: PromiseOrValue<BytesLike>,
      _amount: PromiseOrValue<BigNumberish>,
      _cycle: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    mintMoreRewardToken(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    rewardTokenBalance(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    toggleHealth(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
