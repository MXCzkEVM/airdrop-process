/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export declare namespace MerkleVerifierLibrary {
  export type ProofValueStruct = {
    value: PromiseOrValue<BytesLike>;
    side: PromiseOrValue<BigNumberish>;
  };

  export type ProofValueStructOutput = [string, number] & {
    value: string;
    side: number;
  };
}

export interface RewardContractInterface extends utils.Interface {
  functions: {
    "allTimeRewardEarned(address)": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "applicationContractAddress()": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "businessOwner()": FunctionFragment;
    "calculateFuelHealth(address)": FunctionFragment;
    "claimReward(address,address,address,bytes32,(bytes,int8)[],bytes32,uint256,uint256,uint256)": FunctionFragment;
    "cycleCount()": FunctionFragment;
    "decimals()": FunctionFragment;
    "decreaseAllowance(address,uint256)": FunctionFragment;
    "healthStatus()": FunctionFragment;
    "increaseAllowance(address,uint256)": FunctionFragment;
    "lpwanAddress()": FunctionFragment;
    "merkleRoot()": FunctionFragment;
    "mintMoreRewardToken(uint256)": FunctionFragment;
    "name()": FunctionFragment;
    "owner()": FunctionFragment;
    "reward(address)": FunctionFragment;
    "rewardTokenBalance()": FunctionFragment;
    "rewardTokenClaimed(uint256,address)": FunctionFragment;
    "sensorProfileAddresses(uint256)": FunctionFragment;
    "setCycleCount(uint256)": FunctionFragment;
    "symbol()": FunctionFragment;
    "toggleHealth()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "uint256ToString(uint256)": FunctionFragment;
    "updateMerkleRoot(bytes32)": FunctionFragment;
    "verifyProof(bytes32,(bytes,int8)[])": FunctionFragment;
    "xToEarnFormulaJSON()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "allTimeRewardEarned"
      | "allowance"
      | "applicationContractAddress"
      | "approve"
      | "balanceOf"
      | "businessOwner"
      | "calculateFuelHealth"
      | "claimReward"
      | "cycleCount"
      | "decimals"
      | "decreaseAllowance"
      | "healthStatus"
      | "increaseAllowance"
      | "lpwanAddress"
      | "merkleRoot"
      | "mintMoreRewardToken"
      | "name"
      | "owner"
      | "reward"
      | "rewardTokenBalance"
      | "rewardTokenClaimed"
      | "sensorProfileAddresses"
      | "setCycleCount"
      | "symbol"
      | "toggleHealth"
      | "totalSupply"
      | "transfer"
      | "transferFrom"
      | "uint256ToString"
      | "updateMerkleRoot"
      | "verifyProof"
      | "xToEarnFormulaJSON"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "allTimeRewardEarned",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "applicationContractAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "businessOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculateFuelHealth",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "claimReward",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      MerkleVerifierLibrary.ProofValueStruct[],
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "cycleCount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "healthStatus",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "lpwanAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "merkleRoot",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mintMoreRewardToken",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "reward",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardTokenBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardTokenClaimed",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "sensorProfileAddresses",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setCycleCount",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "toggleHealth",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "uint256ToString",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMerkleRoot",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyProof",
    values: [
      PromiseOrValue<BytesLike>,
      MerkleVerifierLibrary.ProofValueStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "xToEarnFormulaJSON",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "allTimeRewardEarned",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "applicationContractAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "businessOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateFuelHealth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cycleCount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "healthStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lpwanAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "merkleRoot", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintMoreRewardToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "reward", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rewardTokenBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardTokenClaimed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sensorProfileAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCycleCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "toggleHealth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uint256ToString",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMerkleRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyProof",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "xToEarnFormulaJSON",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "CycleCountSet(uint256)": EventFragment;
    "HealthToggled(bool)": EventFragment;
    "MerkleRootUpdated(bytes32)": EventFragment;
    "MoreRewardTokenMinted(uint256)": EventFragment;
    "RewardClaimed(address,address)": EventFragment;
    "RewardContractDeployed(address)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CycleCountSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "HealthToggled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MerkleRootUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MoreRewardTokenMinted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardContractDeployed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  value: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface CycleCountSetEventObject {
  _count: BigNumber;
}
export type CycleCountSetEvent = TypedEvent<
  [BigNumber],
  CycleCountSetEventObject
>;

export type CycleCountSetEventFilter = TypedEventFilter<CycleCountSetEvent>;

export interface HealthToggledEventObject {
  _status: boolean;
}
export type HealthToggledEvent = TypedEvent<
  [boolean],
  HealthToggledEventObject
>;

export type HealthToggledEventFilter = TypedEventFilter<HealthToggledEvent>;

export interface MerkleRootUpdatedEventObject {
  _merkleRoot: string;
}
export type MerkleRootUpdatedEvent = TypedEvent<
  [string],
  MerkleRootUpdatedEventObject
>;

export type MerkleRootUpdatedEventFilter =
  TypedEventFilter<MerkleRootUpdatedEvent>;

export interface MoreRewardTokenMintedEventObject {
  _amount: BigNumber;
}
export type MoreRewardTokenMintedEvent = TypedEvent<
  [BigNumber],
  MoreRewardTokenMintedEventObject
>;

export type MoreRewardTokenMintedEventFilter =
  TypedEventFilter<MoreRewardTokenMintedEvent>;

export interface RewardClaimedEventObject {
  _appContractAddress: string;
  claimer: string;
}
export type RewardClaimedEvent = TypedEvent<
  [string, string],
  RewardClaimedEventObject
>;

export type RewardClaimedEventFilter = TypedEventFilter<RewardClaimedEvent>;

export interface RewardContractDeployedEventObject {
  rewardContractAddress: string;
}
export type RewardContractDeployedEvent = TypedEvent<
  [string],
  RewardContractDeployedEventObject
>;

export type RewardContractDeployedEventFilter =
  TypedEventFilter<RewardContractDeployedEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  value: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface RewardContract extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RewardContractInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    allTimeRewardEarned(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    applicationContractAddress(overrides?: CallOverrides): Promise<[string]>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    businessOwner(overrides?: CallOverrides): Promise<[string]>;

    calculateFuelHealth(
      _nftAccountAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { fuelHealth_: BigNumber }>;

    claimReward(
      _appContractAddress: PromiseOrValue<string>,
      _sensorProfileAddress: PromiseOrValue<string>,
      _nftAccountAddress: PromiseOrValue<string>,
      _merkleRoot: PromiseOrValue<BytesLike>,
      _merkleProof: MerkleVerifierLibrary.ProofValueStruct[],
      _leaf: PromiseOrValue<BytesLike>,
      _amount: PromiseOrValue<BigNumberish>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _cycle: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cycleCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    healthStatus(overrides?: CallOverrides): Promise<[boolean]>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    lpwanAddress(overrides?: CallOverrides): Promise<[string]>;

    merkleRoot(overrides?: CallOverrides): Promise<[string]>;

    mintMoreRewardToken(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    reward(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    rewardTokenBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    rewardTokenClaimed(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    sensorProfileAddresses(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    setCycleCount(
      _count: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    toggleHealth(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    uint256ToString(
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    updateMerkleRoot(
      _merkleRoot: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    verifyProof(
      leaf: PromiseOrValue<BytesLike>,
      proof: MerkleVerifierLibrary.ProofValueStruct[],
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    xToEarnFormulaJSON(overrides?: CallOverrides): Promise<[string]>;
  };

  allTimeRewardEarned(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  allowance(
    owner: PromiseOrValue<string>,
    spender: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  applicationContractAddress(overrides?: CallOverrides): Promise<string>;

  approve(
    spender: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  balanceOf(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  businessOwner(overrides?: CallOverrides): Promise<string>;

  calculateFuelHealth(
    _nftAccountAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  claimReward(
    _appContractAddress: PromiseOrValue<string>,
    _sensorProfileAddress: PromiseOrValue<string>,
    _nftAccountAddress: PromiseOrValue<string>,
    _merkleRoot: PromiseOrValue<BytesLike>,
    _merkleProof: MerkleVerifierLibrary.ProofValueStruct[],
    _leaf: PromiseOrValue<BytesLike>,
    _amount: PromiseOrValue<BigNumberish>,
    _tokenId: PromiseOrValue<BigNumberish>,
    _cycle: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cycleCount(overrides?: CallOverrides): Promise<BigNumber>;

  decimals(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: PromiseOrValue<string>,
    subtractedValue: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  healthStatus(overrides?: CallOverrides): Promise<boolean>;

  increaseAllowance(
    spender: PromiseOrValue<string>,
    addedValue: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  lpwanAddress(overrides?: CallOverrides): Promise<string>;

  merkleRoot(overrides?: CallOverrides): Promise<string>;

  mintMoreRewardToken(
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  reward(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  rewardTokenBalance(overrides?: CallOverrides): Promise<BigNumber>;

  rewardTokenClaimed(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  sensorProfileAddresses(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  setCycleCount(
    _count: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  toggleHealth(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  uint256ToString(
    value: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  updateMerkleRoot(
    _merkleRoot: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  verifyProof(
    leaf: PromiseOrValue<BytesLike>,
    proof: MerkleVerifierLibrary.ProofValueStruct[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  xToEarnFormulaJSON(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    allTimeRewardEarned(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    applicationContractAddress(overrides?: CallOverrides): Promise<string>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    businessOwner(overrides?: CallOverrides): Promise<string>;

    calculateFuelHealth(
      _nftAccountAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimReward(
      _appContractAddress: PromiseOrValue<string>,
      _sensorProfileAddress: PromiseOrValue<string>,
      _nftAccountAddress: PromiseOrValue<string>,
      _merkleRoot: PromiseOrValue<BytesLike>,
      _merkleProof: MerkleVerifierLibrary.ProofValueStruct[],
      _leaf: PromiseOrValue<BytesLike>,
      _amount: PromiseOrValue<BigNumberish>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _cycle: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    cycleCount(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    healthStatus(overrides?: CallOverrides): Promise<boolean>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lpwanAddress(overrides?: CallOverrides): Promise<string>;

    merkleRoot(overrides?: CallOverrides): Promise<string>;

    mintMoreRewardToken(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    reward(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardTokenBalance(overrides?: CallOverrides): Promise<BigNumber>;

    rewardTokenClaimed(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    sensorProfileAddresses(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    setCycleCount(
      _count: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    toggleHealth(overrides?: CallOverrides): Promise<void>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    uint256ToString(
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    updateMerkleRoot(
      _merkleRoot: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    verifyProof(
      leaf: PromiseOrValue<BytesLike>,
      proof: MerkleVerifierLibrary.ProofValueStruct[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    xToEarnFormulaJSON(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null
    ): ApprovalEventFilter;
    Approval(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null
    ): ApprovalEventFilter;

    "CycleCountSet(uint256)"(
      _count?: PromiseOrValue<BigNumberish> | null
    ): CycleCountSetEventFilter;
    CycleCountSet(
      _count?: PromiseOrValue<BigNumberish> | null
    ): CycleCountSetEventFilter;

    "HealthToggled(bool)"(
      _status?: PromiseOrValue<boolean> | null
    ): HealthToggledEventFilter;
    HealthToggled(
      _status?: PromiseOrValue<boolean> | null
    ): HealthToggledEventFilter;

    "MerkleRootUpdated(bytes32)"(
      _merkleRoot?: PromiseOrValue<BytesLike> | null
    ): MerkleRootUpdatedEventFilter;
    MerkleRootUpdated(
      _merkleRoot?: PromiseOrValue<BytesLike> | null
    ): MerkleRootUpdatedEventFilter;

    "MoreRewardTokenMinted(uint256)"(
      _amount?: PromiseOrValue<BigNumberish> | null
    ): MoreRewardTokenMintedEventFilter;
    MoreRewardTokenMinted(
      _amount?: PromiseOrValue<BigNumberish> | null
    ): MoreRewardTokenMintedEventFilter;

    "RewardClaimed(address,address)"(
      _appContractAddress?: PromiseOrValue<string> | null,
      claimer?: PromiseOrValue<string> | null
    ): RewardClaimedEventFilter;
    RewardClaimed(
      _appContractAddress?: PromiseOrValue<string> | null,
      claimer?: PromiseOrValue<string> | null
    ): RewardClaimedEventFilter;

    "RewardContractDeployed(address)"(
      rewardContractAddress?: PromiseOrValue<string> | null
    ): RewardContractDeployedEventFilter;
    RewardContractDeployed(
      rewardContractAddress?: PromiseOrValue<string> | null
    ): RewardContractDeployedEventFilter;

    "Transfer(address,address,uint256)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null
    ): TransferEventFilter;
    Transfer(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null
    ): TransferEventFilter;
  };

  estimateGas: {
    allTimeRewardEarned(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    applicationContractAddress(overrides?: CallOverrides): Promise<BigNumber>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    businessOwner(overrides?: CallOverrides): Promise<BigNumber>;

    calculateFuelHealth(
      _nftAccountAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimReward(
      _appContractAddress: PromiseOrValue<string>,
      _sensorProfileAddress: PromiseOrValue<string>,
      _nftAccountAddress: PromiseOrValue<string>,
      _merkleRoot: PromiseOrValue<BytesLike>,
      _merkleProof: MerkleVerifierLibrary.ProofValueStruct[],
      _leaf: PromiseOrValue<BytesLike>,
      _amount: PromiseOrValue<BigNumberish>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _cycle: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cycleCount(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    healthStatus(overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    lpwanAddress(overrides?: CallOverrides): Promise<BigNumber>;

    merkleRoot(overrides?: CallOverrides): Promise<BigNumber>;

    mintMoreRewardToken(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    reward(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardTokenBalance(overrides?: CallOverrides): Promise<BigNumber>;

    rewardTokenClaimed(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sensorProfileAddresses(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setCycleCount(
      _count: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    toggleHealth(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    uint256ToString(
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateMerkleRoot(
      _merkleRoot: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    verifyProof(
      leaf: PromiseOrValue<BytesLike>,
      proof: MerkleVerifierLibrary.ProofValueStruct[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    xToEarnFormulaJSON(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    allTimeRewardEarned(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    applicationContractAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    businessOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    calculateFuelHealth(
      _nftAccountAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimReward(
      _appContractAddress: PromiseOrValue<string>,
      _sensorProfileAddress: PromiseOrValue<string>,
      _nftAccountAddress: PromiseOrValue<string>,
      _merkleRoot: PromiseOrValue<BytesLike>,
      _merkleProof: MerkleVerifierLibrary.ProofValueStruct[],
      _leaf: PromiseOrValue<BytesLike>,
      _amount: PromiseOrValue<BigNumberish>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _cycle: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cycleCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    healthStatus(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    lpwanAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    merkleRoot(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mintMoreRewardToken(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reward(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardTokenBalance(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardTokenClaimed(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sensorProfileAddresses(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setCycleCount(
      _count: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    toggleHealth(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    uint256ToString(
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateMerkleRoot(
      _merkleRoot: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    verifyProof(
      leaf: PromiseOrValue<BytesLike>,
      proof: MerkleVerifierLibrary.ProofValueStruct[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    xToEarnFormulaJSON(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
