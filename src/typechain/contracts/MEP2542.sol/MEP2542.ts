/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace MEP2542 {
  export type RewardInfoStruct = {
    token: PromiseOrValue<string>[];
    amount: PromiseOrValue<BigNumberish>[];
  };

  export type RewardInfoStructOutput = [string[], BigNumber[]] & {
    token: string[];
    amount: BigNumber[];
  };

  export type ProofArrayStruct = { proofs: PromiseOrValue<BytesLike>[] };

  export type ProofArrayStructOutput = [string[]] & { proofs: string[] };

  export type RewardTokenInfoStruct = {
    token: PromiseOrValue<string>;
    permitOwner: PromiseOrValue<string>;
    amountPerEpoch: PromiseOrValue<BigNumberish>;
  };

  export type RewardTokenInfoStructOutput = [string, string, BigNumber] & {
    token: string;
    permitOwner: string;
    amountPerEpoch: BigNumber;
  };
}

export interface MEP2542Interface extends utils.Interface {
  functions: {
    "DOMAIN_SEPARATOR()": FunctionFragment;
    "ERC6551AccountImplAddr()": FunctionFragment;
    "ERC6551Registry()": FunctionFragment;
    "MEP1004Token_()": FunctionFragment;
    "PERMIT_TYPEHASH()": FunctionFragment;
    "__Controllable_init()": FunctionFragment;
    "addRewardToken(address,address,uint256)": FunctionFragment;
    "claimRewards(uint256,address,(bytes32[])[],uint256[],(address[],uint256[])[])": FunctionFragment;
    "controllers(address)": FunctionFragment;
    "currentEpoch()": FunctionFragment;
    "epochExpiredTime()": FunctionFragment;
    "epochReleaseTime(uint256)": FunctionFragment;
    "getMinerClaimedEpochs(uint256,uint256[])": FunctionFragment;
    "getMinerOnlineStatus(uint256,uint256)": FunctionFragment;
    "getRewardTokenInfo()": FunctionFragment;
    "getUserSelectedToken(address)": FunctionFragment;
    "initialize(address,address,address,address,address,uint256,uint256)": FunctionFragment;
    "maxSelectToken()": FunctionFragment;
    "owner()": FunctionFragment;
    "releaseEpoch(uint256,bytes32,bytes)": FunctionFragment;
    "removeRewardToken(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rewardMerkleRoots(uint256)": FunctionFragment;
    "rewardTokens(uint256)": FunctionFragment;
    "selectToken(address[],bytes[])": FunctionFragment;
    "sensorToken()": FunctionFragment;
    "setController(address,bool)": FunctionFragment;
    "setMaxSelectToken(uint256)": FunctionFragment;
    "setRewardToken(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "treasury()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DOMAIN_SEPARATOR"
      | "ERC6551AccountImplAddr"
      | "ERC6551Registry"
      | "MEP1004Token_"
      | "PERMIT_TYPEHASH"
      | "__Controllable_init"
      | "addRewardToken"
      | "claimRewards"
      | "controllers"
      | "currentEpoch"
      | "epochExpiredTime"
      | "epochReleaseTime"
      | "getMinerClaimedEpochs"
      | "getMinerOnlineStatus"
      | "getRewardTokenInfo"
      | "getUserSelectedToken"
      | "initialize"
      | "maxSelectToken"
      | "owner"
      | "releaseEpoch"
      | "removeRewardToken"
      | "renounceOwnership"
      | "rewardMerkleRoots"
      | "rewardTokens"
      | "selectToken"
      | "sensorToken"
      | "setController"
      | "setMaxSelectToken"
      | "setRewardToken"
      | "transferOwnership"
      | "treasury"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DOMAIN_SEPARATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ERC6551AccountImplAddr",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ERC6551Registry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MEP1004Token_",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PERMIT_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "__Controllable_init",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addRewardToken",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "claimRewards",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      MEP2542.ProofArrayStruct[],
      PromiseOrValue<BigNumberish>[],
      MEP2542.RewardInfoStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "controllers",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "currentEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "epochExpiredTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "epochReleaseTime",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getMinerClaimedEpochs",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getMinerOnlineStatus",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardTokenInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserSelectedToken",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "maxSelectToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "releaseEpoch",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeRewardToken",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardMerkleRoots",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardTokens",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "selectToken",
    values: [PromiseOrValue<string>[], PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "sensorToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setController",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxSelectToken",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardToken",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "treasury", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "DOMAIN_SEPARATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ERC6551AccountImplAddr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ERC6551Registry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MEP1004Token_",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PERMIT_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "__Controllable_init",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addRewardToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "controllers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "epochExpiredTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "epochReleaseTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMinerClaimedEpochs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMinerOnlineStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardTokenInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserSelectedToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxSelectToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "releaseEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeRewardToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardMerkleRoots",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "selectToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sensorToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxSelectToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRewardToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;

  events: {
    "ClaimedReward(address,uint256,tuple)": EventFragment;
    "ControllerChanged(address,bool)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "ReleaseEpoch(uint256,bytes32,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ClaimedReward"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ControllerChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReleaseEpoch"): EventFragment;
}

export interface ClaimedRewardEventObject {
  miner: string;
  epochNumber: BigNumber;
  rewardInfo: MEP2542.RewardInfoStructOutput;
}
export type ClaimedRewardEvent = TypedEvent<
  [string, BigNumber, MEP2542.RewardInfoStructOutput],
  ClaimedRewardEventObject
>;

export type ClaimedRewardEventFilter = TypedEventFilter<ClaimedRewardEvent>;

export interface ControllerChangedEventObject {
  controller: string;
  enabled: boolean;
}
export type ControllerChangedEvent = TypedEvent<
  [string, boolean],
  ControllerChangedEventObject
>;

export type ControllerChangedEventFilter =
  TypedEventFilter<ControllerChangedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface ReleaseEpochEventObject {
  epochNumber: BigNumber;
  rewardMerkleRoot: string;
  onlineStatusPointer: string;
}
export type ReleaseEpochEvent = TypedEvent<
  [BigNumber, string, string],
  ReleaseEpochEventObject
>;

export type ReleaseEpochEventFilter = TypedEventFilter<ReleaseEpochEvent>;

export interface MEP2542 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MEP2542Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<[string]>;

    ERC6551AccountImplAddr(overrides?: CallOverrides): Promise<[string]>;

    ERC6551Registry(overrides?: CallOverrides): Promise<[string]>;

    MEP1004Token_(overrides?: CallOverrides): Promise<[string]>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    __Controllable_init(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addRewardToken(
      token: PromiseOrValue<string>,
      permitOwner: PromiseOrValue<string>,
      amountPerEpoch: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimRewards(
      MEP1004TokenId: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      proofs: MEP2542.ProofArrayStruct[],
      epochIds: PromiseOrValue<BigNumberish>[],
      rewards: MEP2542.RewardInfoStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    controllers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    currentEpoch(overrides?: CallOverrides): Promise<[BigNumber]>;

    epochExpiredTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    epochReleaseTime(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getMinerClaimedEpochs(
      MEP1004TokenId: PromiseOrValue<BigNumberish>,
      epochNumbers: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<[boolean[]]>;

    getMinerOnlineStatus(
      epochNumber: PromiseOrValue<BigNumberish>,
      MEP1004TokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getRewardTokenInfo(
      overrides?: CallOverrides
    ): Promise<[MEP2542.RewardTokenInfoStructOutput[]]>;

    getUserSelectedToken(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    initialize(
      _treasury: PromiseOrValue<string>,
      _ERC6551Registry: PromiseOrValue<string>,
      _ERC6551AccountImplAddr: PromiseOrValue<string>,
      _MEP1004Addr: PromiseOrValue<string>,
      _sensorToken: PromiseOrValue<string>,
      _epochExpiredTime: PromiseOrValue<BigNumberish>,
      _maxSelectToken: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    maxSelectToken(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    releaseEpoch(
      epochNumber: PromiseOrValue<BigNumberish>,
      rewardMerkleRoot: PromiseOrValue<BytesLike>,
      statusBitMap: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeRewardToken(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    rewardMerkleRoots(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    rewardTokens(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber] & {
        token: string;
        permitOwner: string;
        amountPerEpoch: BigNumber;
      }
    >;

    selectToken(
      tokens: PromiseOrValue<string>[],
      signatures: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sensorToken(overrides?: CallOverrides): Promise<[string]>;

    setController(
      controller: PromiseOrValue<string>,
      enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMaxSelectToken(
      _maxSelectToken: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRewardToken(
      token: PromiseOrValue<string>,
      permitOwner: PromiseOrValue<string>,
      amountPerEpoch: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    treasury(overrides?: CallOverrides): Promise<[string]>;
  };

  DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

  ERC6551AccountImplAddr(overrides?: CallOverrides): Promise<string>;

  ERC6551Registry(overrides?: CallOverrides): Promise<string>;

  MEP1004Token_(overrides?: CallOverrides): Promise<string>;

  PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  __Controllable_init(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addRewardToken(
    token: PromiseOrValue<string>,
    permitOwner: PromiseOrValue<string>,
    amountPerEpoch: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimRewards(
    MEP1004TokenId: PromiseOrValue<BigNumberish>,
    to: PromiseOrValue<string>,
    proofs: MEP2542.ProofArrayStruct[],
    epochIds: PromiseOrValue<BigNumberish>[],
    rewards: MEP2542.RewardInfoStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  controllers(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  currentEpoch(overrides?: CallOverrides): Promise<BigNumber>;

  epochExpiredTime(overrides?: CallOverrides): Promise<BigNumber>;

  epochReleaseTime(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMinerClaimedEpochs(
    MEP1004TokenId: PromiseOrValue<BigNumberish>,
    epochNumbers: PromiseOrValue<BigNumberish>[],
    overrides?: CallOverrides
  ): Promise<boolean[]>;

  getMinerOnlineStatus(
    epochNumber: PromiseOrValue<BigNumberish>,
    MEP1004TokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getRewardTokenInfo(
    overrides?: CallOverrides
  ): Promise<MEP2542.RewardTokenInfoStructOutput[]>;

  getUserSelectedToken(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  initialize(
    _treasury: PromiseOrValue<string>,
    _ERC6551Registry: PromiseOrValue<string>,
    _ERC6551AccountImplAddr: PromiseOrValue<string>,
    _MEP1004Addr: PromiseOrValue<string>,
    _sensorToken: PromiseOrValue<string>,
    _epochExpiredTime: PromiseOrValue<BigNumberish>,
    _maxSelectToken: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  maxSelectToken(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  releaseEpoch(
    epochNumber: PromiseOrValue<BigNumberish>,
    rewardMerkleRoot: PromiseOrValue<BytesLike>,
    statusBitMap: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeRewardToken(
    token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  rewardMerkleRoots(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  rewardTokens(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber] & {
      token: string;
      permitOwner: string;
      amountPerEpoch: BigNumber;
    }
  >;

  selectToken(
    tokens: PromiseOrValue<string>[],
    signatures: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sensorToken(overrides?: CallOverrides): Promise<string>;

  setController(
    controller: PromiseOrValue<string>,
    enabled: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMaxSelectToken(
    _maxSelectToken: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRewardToken(
    token: PromiseOrValue<string>,
    permitOwner: PromiseOrValue<string>,
    amountPerEpoch: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  treasury(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

    ERC6551AccountImplAddr(overrides?: CallOverrides): Promise<string>;

    ERC6551Registry(overrides?: CallOverrides): Promise<string>;

    MEP1004Token_(overrides?: CallOverrides): Promise<string>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    __Controllable_init(overrides?: CallOverrides): Promise<void>;

    addRewardToken(
      token: PromiseOrValue<string>,
      permitOwner: PromiseOrValue<string>,
      amountPerEpoch: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    claimRewards(
      MEP1004TokenId: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      proofs: MEP2542.ProofArrayStruct[],
      epochIds: PromiseOrValue<BigNumberish>[],
      rewards: MEP2542.RewardInfoStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    controllers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    currentEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    epochExpiredTime(overrides?: CallOverrides): Promise<BigNumber>;

    epochReleaseTime(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMinerClaimedEpochs(
      MEP1004TokenId: PromiseOrValue<BigNumberish>,
      epochNumbers: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<boolean[]>;

    getMinerOnlineStatus(
      epochNumber: PromiseOrValue<BigNumberish>,
      MEP1004TokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getRewardTokenInfo(
      overrides?: CallOverrides
    ): Promise<MEP2542.RewardTokenInfoStructOutput[]>;

    getUserSelectedToken(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    initialize(
      _treasury: PromiseOrValue<string>,
      _ERC6551Registry: PromiseOrValue<string>,
      _ERC6551AccountImplAddr: PromiseOrValue<string>,
      _MEP1004Addr: PromiseOrValue<string>,
      _sensorToken: PromiseOrValue<string>,
      _epochExpiredTime: PromiseOrValue<BigNumberish>,
      _maxSelectToken: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    maxSelectToken(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    releaseEpoch(
      epochNumber: PromiseOrValue<BigNumberish>,
      rewardMerkleRoot: PromiseOrValue<BytesLike>,
      statusBitMap: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeRewardToken(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rewardMerkleRoots(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    rewardTokens(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber] & {
        token: string;
        permitOwner: string;
        amountPerEpoch: BigNumber;
      }
    >;

    selectToken(
      tokens: PromiseOrValue<string>[],
      signatures: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    sensorToken(overrides?: CallOverrides): Promise<string>;

    setController(
      controller: PromiseOrValue<string>,
      enabled: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxSelectToken(
      _maxSelectToken: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setRewardToken(
      token: PromiseOrValue<string>,
      permitOwner: PromiseOrValue<string>,
      amountPerEpoch: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    treasury(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "ClaimedReward(address,uint256,tuple)"(
      miner?: PromiseOrValue<string> | null,
      epochNumber?: PromiseOrValue<BigNumberish> | null,
      rewardInfo?: null
    ): ClaimedRewardEventFilter;
    ClaimedReward(
      miner?: PromiseOrValue<string> | null,
      epochNumber?: PromiseOrValue<BigNumberish> | null,
      rewardInfo?: null
    ): ClaimedRewardEventFilter;

    "ControllerChanged(address,bool)"(
      controller?: PromiseOrValue<string> | null,
      enabled?: null
    ): ControllerChangedEventFilter;
    ControllerChanged(
      controller?: PromiseOrValue<string> | null,
      enabled?: null
    ): ControllerChangedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "ReleaseEpoch(uint256,bytes32,address)"(
      epochNumber?: PromiseOrValue<BigNumberish> | null,
      rewardMerkleRoot?: PromiseOrValue<BytesLike> | null,
      onlineStatusPointer?: null
    ): ReleaseEpochEventFilter;
    ReleaseEpoch(
      epochNumber?: PromiseOrValue<BigNumberish> | null,
      rewardMerkleRoot?: PromiseOrValue<BytesLike> | null,
      onlineStatusPointer?: null
    ): ReleaseEpochEventFilter;
  };

  estimateGas: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<BigNumber>;

    ERC6551AccountImplAddr(overrides?: CallOverrides): Promise<BigNumber>;

    ERC6551Registry(overrides?: CallOverrides): Promise<BigNumber>;

    MEP1004Token_(overrides?: CallOverrides): Promise<BigNumber>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    __Controllable_init(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addRewardToken(
      token: PromiseOrValue<string>,
      permitOwner: PromiseOrValue<string>,
      amountPerEpoch: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimRewards(
      MEP1004TokenId: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      proofs: MEP2542.ProofArrayStruct[],
      epochIds: PromiseOrValue<BigNumberish>[],
      rewards: MEP2542.RewardInfoStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    controllers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    currentEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    epochExpiredTime(overrides?: CallOverrides): Promise<BigNumber>;

    epochReleaseTime(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMinerClaimedEpochs(
      MEP1004TokenId: PromiseOrValue<BigNumberish>,
      epochNumbers: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMinerOnlineStatus(
      epochNumber: PromiseOrValue<BigNumberish>,
      MEP1004TokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRewardTokenInfo(overrides?: CallOverrides): Promise<BigNumber>;

    getUserSelectedToken(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _treasury: PromiseOrValue<string>,
      _ERC6551Registry: PromiseOrValue<string>,
      _ERC6551AccountImplAddr: PromiseOrValue<string>,
      _MEP1004Addr: PromiseOrValue<string>,
      _sensorToken: PromiseOrValue<string>,
      _epochExpiredTime: PromiseOrValue<BigNumberish>,
      _maxSelectToken: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    maxSelectToken(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    releaseEpoch(
      epochNumber: PromiseOrValue<BigNumberish>,
      rewardMerkleRoot: PromiseOrValue<BytesLike>,
      statusBitMap: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeRewardToken(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    rewardMerkleRoots(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardTokens(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    selectToken(
      tokens: PromiseOrValue<string>[],
      signatures: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sensorToken(overrides?: CallOverrides): Promise<BigNumber>;

    setController(
      controller: PromiseOrValue<string>,
      enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMaxSelectToken(
      _maxSelectToken: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRewardToken(
      token: PromiseOrValue<string>,
      permitOwner: PromiseOrValue<string>,
      amountPerEpoch: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    treasury(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ERC6551AccountImplAddr(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ERC6551Registry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MEP1004Token_(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    __Controllable_init(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addRewardToken(
      token: PromiseOrValue<string>,
      permitOwner: PromiseOrValue<string>,
      amountPerEpoch: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimRewards(
      MEP1004TokenId: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      proofs: MEP2542.ProofArrayStruct[],
      epochIds: PromiseOrValue<BigNumberish>[],
      rewards: MEP2542.RewardInfoStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    controllers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currentEpoch(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    epochExpiredTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    epochReleaseTime(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMinerClaimedEpochs(
      MEP1004TokenId: PromiseOrValue<BigNumberish>,
      epochNumbers: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMinerOnlineStatus(
      epochNumber: PromiseOrValue<BigNumberish>,
      MEP1004TokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRewardTokenInfo(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserSelectedToken(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _treasury: PromiseOrValue<string>,
      _ERC6551Registry: PromiseOrValue<string>,
      _ERC6551AccountImplAddr: PromiseOrValue<string>,
      _MEP1004Addr: PromiseOrValue<string>,
      _sensorToken: PromiseOrValue<string>,
      _epochExpiredTime: PromiseOrValue<BigNumberish>,
      _maxSelectToken: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    maxSelectToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    releaseEpoch(
      epochNumber: PromiseOrValue<BigNumberish>,
      rewardMerkleRoot: PromiseOrValue<BytesLike>,
      statusBitMap: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeRewardToken(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    rewardMerkleRoots(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardTokens(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    selectToken(
      tokens: PromiseOrValue<string>[],
      signatures: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sensorToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setController(
      controller: PromiseOrValue<string>,
      enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMaxSelectToken(
      _maxSelectToken: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRewardToken(
      token: PromiseOrValue<string>,
      permitOwner: PromiseOrValue<string>,
      amountPerEpoch: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    treasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
